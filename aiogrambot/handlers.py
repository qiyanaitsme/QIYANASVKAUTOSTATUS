from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import json
import asyncio
from keyboards import get_main_keyboard, get_settings_keyboard, get_templates_keyboard
from vk_service import vk_auth, create_status


class Settings(StatesGroup):
    waiting_for_vk_token = State()
    waiting_for_interval = State()


class StatusManager:
    def __init__(self):
        self.is_status_running = False
        self.current_task = None
        self.vk = None


status_manager = StatusManager()


async def status_updater(template_id):
    print(f"[DEBUG] Starting status updater with template {template_id}")
    while status_manager.is_status_running:
        try:
            if status_manager.vk:
                status = await create_status(status_manager.vk, template_id)
                print(f"[INFO] Status successfully updated: {status}")
            else:
                print("[ERROR] VK API not initialized")
                break

            with open('config.json', 'r') as f:
                config = json.load(f)
            await asyncio.sleep(config['status_update_interval'])
        except Exception as e:
            print(f"[ERROR] Status update failed: {e}")
            break


async def start_command(message: types.Message):
    with open('config.json', 'r') as f:
        config = json.load(f)
    if message.from_user.id != config['allowed_user_id']:
        return
    await message.answer("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto Status Bot! üåü", reply_markup=get_main_keyboard())


async def settings_menu(call: types.CallbackQuery):
    await call.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=get_settings_keyboard())


async def change_vk_token(call: types.CallbackQuery):
    await Settings.waiting_for_vk_token.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await call.message.edit_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω VK:", reply_markup=keyboard)


async def process_vk_token(message: types.Message, state: FSMContext):
    with open('config.json', 'r') as f:
        config = json.load(f)
    if message.from_user.id != config['allowed_user_id']:
        return

    new_token = message.text
    status_manager.vk = vk_auth(new_token)

    if status_manager.vk:
        config['vk_token'] = new_token
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω VK —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω VK!")

    await state.finish()


async def change_interval(call: types.CallbackQuery):
    await Settings.waiting_for_interval.set()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await call.message.edit_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:", reply_markup=keyboard)


async def process_interval(message: types.Message, state: FSMContext):
    with open('config.json', 'r') as f:
        config = json.load(f)
    if message.from_user.id != config['allowed_user_id']:
        return

    try:
        new_interval = int(message.text)
        if new_interval < 30:
            await message.answer("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥!")
            return

        config['status_update_interval'] = new_interval
        with open('config.json', 'w') as f:
            json.dump(config, f, indent=4)
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥!")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    await state.finish()


async def start_status_menu(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=get_templates_keyboard())


async def process_template(call: types.CallbackQuery):
    template_id = int(call.data.split("_")[1])

    if not status_manager.vk:
        await call.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω VK –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    status_manager.is_status_running = True
    if status_manager.current_task:
        status_manager.current_task.cancel()

    status_manager.current_task = asyncio.create_task(status_updater(template_id))

    with open('config.json', 'r') as f:
        config = json.load(f)

    test_status = await create_status(status_manager.vk, template_id)
    if test_status:
        await call.message.edit_text(
            f"‚úÖ –ê–≤—Ç–æ—Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω —Å —à–∞–±–ª–æ–Ω–æ–º {template_id}\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {config['status_update_interval']} —Å–µ–∫—É–Ω–¥"
        )
    else:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω VK.")


async def stop_status(call: types.CallbackQuery):
    status_manager.is_status_running = False
    if status_manager.current_task:
        status_manager.current_task.cancel()
        status_manager.current_task = None
    await call.message.edit_text("‚ùå –ê–≤—Ç–æ—Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def back_to_main(call: types.CallbackQuery):
    await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())


def register_handlers(dp):
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_callback_query_handler(settings_menu, lambda c: c.data == "settings")
    dp.register_callback_query_handler(change_vk_token, lambda c: c.data == "change_vk_token")
    dp.register_callback_query_handler(change_interval, lambda c: c.data == "change_interval")
    dp.register_callback_query_handler(start_status_menu, lambda c: c.data == "start_status")
    dp.register_callback_query_handler(process_template, lambda c: c.data.startswith("template_"))
    dp.register_callback_query_handler(stop_status, lambda c: c.data == "stop_status")
    dp.register_callback_query_handler(back_to_main, lambda c: c.data == "back_to_main")
    dp.register_message_handler(process_vk_token, state=Settings.waiting_for_vk_token)
    dp.register_message_handler(process_interval, state=Settings.waiting_for_interval)
