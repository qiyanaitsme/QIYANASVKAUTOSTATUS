import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import json
import asyncio
import threading
import time
from keyboards import get_main_keyboard, get_settings_keyboard, get_templates_keyboard
from vk_service import vk_auth, create_status

state_storage = StateMemoryStorage()

class Settings(StatesGroup):
    waiting_for_vk_token = State()
    waiting_for_interval = State()

class StatusManager:
    def __init__(self):
        self.is_status_running = False
        self.current_thread = None
        self.vk = None

status_manager = StatusManager()

def status_updater(template_id):
    print(f"[DEBUG] Starting status updater with template {template_id}")
    while status_manager.is_status_running:
        try:
            if status_manager.vk:
                status = create_status(status_manager.vk, template_id)
                print(f"[INFO] Status successfully updated: {status}")
            else:
                print("[ERROR] VK API not initialized")
                break

            with open('config.json', 'r') as f:
                config = json.load(f)
            time.sleep(config['status_update_interval'])
        except Exception as e:
            print(f"[ERROR] Status update failed: {e}")
            break

def register_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start_command(message):
        with open('config.json', 'r') as f:
            config = json.load(f)
        if message.from_user.id != config['allowed_user_id']:
            return
        bot.send_message(message.chat.id, "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto Status Bot! üåü", 
                        reply_markup=get_main_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data == "settings")
    def settings_menu(call):
        bot.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                            call.message.chat.id, 
                            call.message.message_id,
                            reply_markup=get_settings_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data == "change_vk_token")
    def change_vk_token(call):
        bot.set_state(call.from_user.id, Settings.waiting_for_vk_token, call.message.chat.id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω VK:", 
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=keyboard)

    @bot.message_handler(state=Settings.waiting_for_vk_token)
    def process_vk_token(message):
        with open('config.json', 'r') as f:
            config = json.load(f)
        if message.from_user.id != config['allowed_user_id']:
            return

        new_token = message.text
        status_manager.vk = vk_auth(new_token)

        if status_manager.vk:
            config['vk_token'] = new_token
            with open('config.json', 'w') as f:
                json.dump(config, f, indent=4)
            bot.send_message(message.chat.id, "‚úÖ –¢–æ–∫–µ–Ω VK —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω VK!")

        bot.delete_state(message.from_user.id, message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "change_interval")
    def change_interval(call):
        bot.set_state(call.from_user.id, Settings.waiting_for_interval, call.message.chat.id)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=keyboard)

    @bot.message_handler(state=Settings.waiting_for_interval)
    def process_interval(message):
        with open('config.json', 'r') as f:
            config = json.load(f)
        if message.from_user.id != config['allowed_user_id']:
            return

        try:
            new_interval = int(message.text)
            if new_interval < 30:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥!")
                return

            config['status_update_interval'] = new_interval
            with open('config.json', 'w') as f:
                json.dump(config, f, indent=4)
            bot.send_message(message.chat.id, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥!")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        bot.delete_state(message.from_user.id, message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "start_status")
    def start_status_menu(call):
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—É—Å–∞:",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=get_templates_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data.startswith("template_"))
    def process_template(call):
        template_id = int(call.data.split("_")[1])

        if not status_manager.vk:
            bot.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω VK –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
                                call.message.chat.id,
                                call.message.message_id)
            return

        status_manager.is_status_running = True
        if status_manager.current_thread:
            status_manager.is_status_running = False
            status_manager.current_thread.join()

        status_manager.current_thread = threading.Thread(target=status_updater, args=(template_id,))
        status_manager.current_thread.start()

        with open('config.json', 'r') as f:
            config = json.load(f)

        test_status = create_status(status_manager.vk, template_id)
        if test_status:
            bot.edit_message_text(
                f"‚úÖ –ê–≤—Ç–æ—Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω —Å —à–∞–±–ª–æ–Ω–æ–º {template_id}\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {config['status_update_interval']} —Å–µ–∫—É–Ω–¥",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω VK.",
                                call.message.chat.id,
                                call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "stop_status")
    def stop_status(call):
        status_manager.is_status_running = False
        if status_manager.current_thread:
            status_manager.current_thread.join()
            status_manager.current_thread = None
        bot.edit_message_text("‚ùå –ê–≤—Ç–æ—Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                            call.message.chat.id,
                            call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    def back_to_main(call):
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=get_main_keyboard())